# !/usr/bin/python


import unittest


def add(x, y):
    # add function
    return x + y


def subtract(x, y):
    # subtract function
    return x - y


def multiply(x, y):
    # multiply function
    return x * y


def divide(x, y):
    # divide function
    if y == 0:
        raise ValueError('Can not divide by zero!')
    return x / y


class TestCalc(unittest.TestCase):

    def test_add(self):
        self.assertEqual(add(10, 5), 15)
        self.assertEqual(add(-1, 1), 0)
        self.assertEqual(add(-1, -1), -2)

    def test_subtract(self):
        self.assertEqual(subtract(10, 5), 5)
        self.assertEqual(subtract(-1, 1), -2)
        self.assertEqual(subtract(-1, -1), 0)

    def test_multiply(self):
        self.assertEqual(multiply(10, 5), 50)
        self.assertEqual(multiply(-1, 1), -1)
        self.assertEqual(multiply(-1, -1), 1)

    def test_divide(self):
        self.assertEqual(divide(10, 5), 2)
        self.assertEqual(divide(-1, 1), -1)
        self.assertEqual(divide(-1, -1), 1)
        self.assertRaises(ValueError, divide, 10, 0)
# assertRaises -> Arguments: 1st Exception expected, 2nd Function to run
# 3rd & 4th arguments of the function we want to test
        with self.assertRaises(ValueError):
            divide(10, 0)
# Alternative method for constructing assertRaises testing


# if we run this module -> run unit testing (running via terminal)
if __name__ == '__main__':
    unittest.main()

print(add(10, 5))
